import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env.local
dotenv.config({ path: '.env.local' });

interface AssemblyAITranscriptResponse {
  id: string;
  status: 'queued' | 'processing' | 'completed' | 'error';
  text?: string;
  error?: string;
  confidence?: number;
}

async function testAssemblyAI() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AssemblyAI...');

  const apiKey = process.env.ASSEMBLYAI_API_KEY;
  if (!apiKey) {
    console.error('‚ùå ASSEMBLYAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local');
    return;
  }

  console.log('‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω:', apiKey.substring(0, 10) + '...');

  try {
    // –¢–µ—Å—Ç —Å –ø—É–±–ª–∏—á–Ω—ã–º –∞—É–¥–∏–æ URL (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    const testAudioUrl =
      'https://github.com/AssemblyAI-Examples/audio-examples/raw/main/20230607_me_canadian_wildfires.mp3';

    console.log('üì° –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ...');

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    const startResponse = await fetch(
      'https://api.assemblyai.com/v2/transcript',
      {
        method: 'POST',
        headers: {
          Authorization: apiKey,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          audio_url: testAudioUrl,
          language_code: 'en',
          speaker_labels: true,
          format_text: true,
          punctuate: true,
          filter_profanity: false
        })
      }
    );

    if (!startResponse.ok) {
      throw new Error(
        `Failed to start transcription: ${startResponse.statusText}`
      );
    }

    const startData = await startResponse.json();
    const transcriptId = startData.id;

    console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏... ID:', transcriptId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    let result: AssemblyAITranscriptResponse | undefined;
    const maxAttempts = 30;
    let attempts = 0;

    while (attempts < maxAttempts) {
      const response = await fetch(
        `https://api.assemblyai.com/v2/transcript/${transcriptId}`,
        {
          headers: {
            Authorization: apiKey
          }
        }
      );

      if (!response.ok) {
        throw new Error(`Failed to get transcription: ${response.statusText}`);
      }

      result = await response.json();

      if (
        result &&
        (result.status === 'completed' || result.status === 'error')
      ) {
        break;
      }

      if (result) {
        console.log(`üîÑ –°—Ç–∞—Ç—É—Å: ${result.status}`);
      }
      await new Promise((resolve) => setTimeout(resolve, 2000));
      attempts++;
    }

    if (result && result.status === 'completed') {
      console.log('‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
        status: result.status,
        confidence: result.confidence,
        textLength: result.text?.length || 0
      });

      if (result.text) {
        console.log('üìù –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞:');
        console.log(result.text.substring(0, 200) + '...');
      }
    } else if (result) {
      console.error(
        '‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:',
        result.status,
        result.error
      );
    } else {
      console.error('‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Ç–∞–π–º–∞—É—Ç');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);

    if (error instanceof Error) {
      if (error.message.includes('Authorization')) {
        console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ AssemblyAI');
      } else if (error.message.includes('fetch')) {
        console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
      }
    }
  }
}

testAssemblyAI();
